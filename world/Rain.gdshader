shader_type canvas_item;

uniform int count: hint_range(0, 2000) = 150;
uniform float slant: hint_range(-0.1, 0.1) = -0.01;
uniform float speed: hint_range(25.0, 100.0) = 50.0;
uniform float min_speed: hint_range(10.0, 50.0) = 25.0; // Минимальная скорость движения капель
uniform float blur: hint_range(0.0005, 0.1) = 0.002;
uniform vec4 colour: source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec2 size = vec2(0.005, 0.2);
uniform float flash_intensity : hint_range(0.0, 2.0) = 0.0; // Intensity of the lightning flash

float line_sdf(vec2 p, vec2 s) {
    vec2 d = abs(p) - s;
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

float Hash(float x) {
    return fract(sin(x * 18.34) * 51.78);
}

float Hash2(float x) {
    return fract(sin(x * 25.42) * 21.24);
}

void fragment() {
    vec2 s = size * 0.1;
    float time = TIME + 1000.0;
    vec2 uv = UV;
    uv.x += uv.y * slant;
    float output = 0.0;

    for (int i = 1; i <= count; i++) {
        float h1 = Hash(float(i));
        float h2 = Hash2(float(i));
        float sl = h1 * uv.y * -slant;
        float pos_mod_x = h1 * 1.2;

        // Скорость капли, где min_speed - минимальная скорость, а speed - дополнительная случайная скорость
        float actual_speed = min_speed + h2 * (speed - min_speed);

        vec2 position = vec2(pos_mod_x + sl, -mod(-actual_speed * time * 0.1, -1.));
        float sdf = line_sdf(uv - position, s);
        output += clamp(-sdf / blur, 0.0, 1.0);
    }

    // Lightning flash effect controlled by code
    vec4 flash_color = vec4(vec3(flash_intensity), 1.0); // Uniform flash color based on intensity

    COLOR = mix(vec4(colour.rgb, output), flash_color, flash_intensity);
}